networks:
  linqra-network:
    external: true

services:
  # postgres
  postgres-service:
    build:
      context: .
      dockerfile: ./.kube/postgres/Dockerfile
    command: postgres -c "max_connections=200"
    restart: always
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 3s
      retries: 3
    volumes:
      - ./.kube/postgres/data/:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - linqra-network


  # postgres admin
  pgadmin-service:
    build:
      context: .
      dockerfile: ./.kube/pgadmin/Dockerfile
    restart: always
    ports:
      - "9090:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user-name@domain-name.com
      PGADMIN_DEFAULT_PASSWORD: strong-password
    volumes:
      - ./.kube/pgadmin/data/:/var/lib/pgadmin
    networks:
      - linqra-network

  # keycloak
  keycloak-service:
    build:
      context: .
      dockerfile: ./.kube/keycloak/Dockerfile
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-service:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password

      KC_HTTP_ENABLED: true
      KC_HTTP_PORT: 8080
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8281
      KC_HOSTNAME_STRICT: false

      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

    command:
      - start-dev
      - --import-realm
      - --export-realm
    volumes:
      - .kube/keycloak/data/import:/opt/keycloak/data/import
      - .kube/keycloak/data/export:/opt/keycloak/data/export
    depends_on:
      postgres-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "8281:8080"
    networks:
      - linqra-network

# mongodb nodes
  mongodb1:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    build:
      context: .
      dockerfile: ./.kube/mongodb/Dockerfile
    container_name: mongodb1
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongopw
      MONGO_REPLICA_SET_NAME: rs0
    ports:
      - "27017:27017"
    volumes:
      - ./.kube/mongodb/data1/:/data/db
      - ./.kube/mongodb/mongo-keyfile:/data/mongo-keyfile
    networks:
      - linqra-network
    command: mongod --bind_ip_all --replSet rs0 --port 27017 -keyFile /data/mongo-keyfile

  mongodb2:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    build:
      context: .
      dockerfile: ./.kube/mongodb/Dockerfile
    container_name: mongodb2
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongopw
      MONGO_REPLICA_SET_NAME: rs0
    ports:
      - "27018:27018"
    volumes:
      - ./.kube/mongodb/data2/:/data/db
      - ./.kube/mongodb/mongo-keyfile:/data/mongo-keyfile
    networks:
      - linqra-network
    command: mongod  --bind_ip_all  --replSet rs0 --port 27018 -keyFile /data/mongo-keyfile

  mongodb3:
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    build:
      context: .
      dockerfile: ./.kube/mongodb/Dockerfile
    container_name: mongodb3
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongopw
      MONGO_REPLICA_SET_NAME: rs0
    ports:
      - "27019:27019"
    volumes:
      - ./.kube/mongodb/data3/:/data/db
      - ./.kube/mongodb/mongo-keyfile:/data/mongo-keyfile
    networks:
      - linqra-network
    command: mongod --bind_ip_all --replSet rs0 --port 27019 -keyFile /data/mongo-keyfile


  # redis
  redis-service:
    build:
      context: .
      dockerfile: ./.kube/redis/Dockerfile
    environment:
      REDIS_GATEWAY_URL: redis-service
    ports:
      - "6379:6379"
    volumes:
      - ./.kube/redis/data/:/var/lib/redis/data
      - ./.kube/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - linqra-network



#  ##### ENABLE THIS FOR DOCKERIZATION FOR ALL REMAINING SERVICES
#  # Discovery Server (Eureka)
#  discovery-service:
#    build:
#      context: .
#      dockerfile: .kube/eureka/Dockerfile
#    environment:
#      EUREKA_KEY_STORE: eureka-keystore.jks
#      EUREKA_KEY_STORE_PASSWORD: 123456
#      EUREKA_TRUST_STORE: eureka-truststore.jks
#      EUREKA_TRUST_STORE_PASSWORD: 123456
#      EUREKA_GATEWAY_URL: discovery-service
#      EUREKA_ALIAS_NAME: eureka-app-container
#    ports:
#      - "8761:8761"
#    volumes:
#      - ./discovery-server:/app/discovery-server
#      - ./keys:/app/keys
#    networks:
#      - linqra-network
#
#
#  # Load Balancer
#  gateway-loadbalancer:
#    image: haproxy:2.8
#    ports:
#      - "7777:7777"
#    volumes:
#      - ./.kube/gateway/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
#      - ./keys/haproxy/gateway-combined-container.pem:/etc/ssl/gateway-cert.pem:ro
#    networks:
#      - linqra-network
#    depends_on:
#      - api-gateway-service
#
#  # API Gateway Service
#  api-gateway-service:
#    build:
#      context: .
#      dockerfile: ./.kube/gateway/Dockerfile
#    environment:
#      SPRING_PROFILES_ACTIVE: dev
#      GATEWAY_TRUST_STORE: /app/gateway-truststore.jks
#      GATEWAY_TRUST_STORE_PASSWORD: 123456
#      GATEWAY_KEY_STORE: /app/gateway-keystore.jks
#      GATEWAY_KEY_STORE_PASSWORD: 123456
#      GATEWAY_API_HOST: api-gateway-service
#      GATEWAY_ALIAS_NAME: gateway-app-container
#      REDIS_GATEWAY_URL: redis-service
#      MONGO_GATEWAY_URL: "mongodb://root:mongopw@mongodb1:27017,mongodb2:27018,mongodb3:27019/admin?replicaSet=rs0"
#      KEYCLOAK_GATEWAY_URL: keycloak-service
#      KEYCLOAK_GATEWAY_PORT: 8080
#      EUREKA_GATEWAY_URL: discovery-service
#      EUREKA_INSTANCE_URL: api-gateway-service
#      SLACK_ENABLED: false
#      SLACK_WEBHOOK_URL: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
#      SMTP_ENABLED: false
#      SMTP_PASSWORD: 123456
#      SMTP_USERNAME: abcdef
#    volumes:
#      - ./api-gateway:/app/api-gateway
#      - ./keys:/app/keys
#    deploy:
#      replicas: 3
#      restart_policy:
#        condition: on-failure
#    expose:
#      - "7777"
#    networks:
#      - linqra-network
#    depends_on:
#      - discovery-service
#      - mongodb1
#      - mongodb2
#      - mongodb3
#      - keycloak-service
#      - redis-service
