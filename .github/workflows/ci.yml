name: Linqra CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  java-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      
      # Upload Java artifacts
      - name: Upload Java artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-artifacts
          path: api-gateway/target/*.jar

      # Upload Discovery Server artifacts
      - name: Upload Discovery Server artifacts
        uses: actions/upload-artifact@v4
        with:
          name: discovery-server-artifacts
          path: discovery-server/target/*.jar

      # Upload docker-compose.yml
      - name: Upload docker-compose file
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: docker-compose.yml

      # Debug and upload .kube directory with hidden files
      - name: Debug .kube directory
        run: |
          echo "Checking .kube directory contents:"
          ls -la .kube/
          echo "Checking contents of subdirectories:"
          for dir in .kube/*/; do
            echo "Contents of $dir:"
            ls -la "$dir"
          done
          
      - name: Upload .kube directory
        uses: actions/upload-artifact@v4
        with:
          name: kube-config
          path: .kube/**
          if-no-files-found: error

      # Add this new step to upload keys directory
      - name: Upload keys directory
        uses: actions/upload-artifact@v4
        with:
          name: keys-config
          path: keys/
          if-no-files-found: error

  react-build:
    needs: java-build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./edge-service

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.5.0'
          npm: '10.8.1'
          cache: 'npm'
          cache-dependency-path: './edge-service/package-lock.json'

      - name: Remove package-lock.json
        run: rm -f package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps
        continue-on-error: true

      - name: Build React app
        run: npm run build
        env:
          CI: false

      - name: Run tests
        run: npm test
        env:
          CI: false

      # Upload React build
      - name: Upload React build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: edge-service/dist

  deploy:
    needs: [java-build, react-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY_PROD }}

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.HOST_DNS_PROD }}
          EC2_USERNAME: ${{ secrets.USERNAME_PROD }}
          TARGET_DIR: ${{ secrets.TARGET_DIR_PROD }}
        run: |
          # Disable strict host key checking
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

          # Create structured temp directory
          ssh $EC2_USERNAME@$EC2_HOST "
            rm -rf ~/deploy_temp
            mkdir -p ~/deploy_temp/.kube
            mkdir -p ~/deploy_temp/api-gateway
            mkdir -p ~/deploy_temp/edge-service
            mkdir -p ~/deploy_temp/keys
            mkdir -p ~/deploy_temp/discovery-server
            echo 'Temporary directory structure ready'
          "
          
          echo "Starting file copy..."
          
          # Copy all artifacts with error handling
          scp -v artifacts/java-artifacts/*.jar $EC2_USERNAME@$EC2_HOST:~/deploy_temp/api-gateway/ || echo "Failed to copy api-gateway artifacts"
          scp -v artifacts/discovery-server-artifacts/*.jar $EC2_USERNAME@$EC2_HOST:~/deploy_temp/discovery-server/ || echo "Failed to copy discovery-server artifacts"
          scp -v -r artifacts/react-build/* $EC2_USERNAME@$EC2_HOST:~/deploy_temp/edge-service/ || echo "Failed to copy edge-service artifacts"
          scp -v artifacts/docker-compose/docker-compose.yml $EC2_USERNAME@$EC2_HOST:~/deploy_temp/ || echo "Failed to copy docker-compose.yml"
          
          # Modified .kube copy command to match the working keys pattern
          if [ -d "artifacts/kube-config" ]; then
            scp -v -r artifacts/kube-config/* $EC2_USERNAME@$EC2_HOST:~/deploy_temp/.kube/ || echo "Failed to copy .kube directory contents"
          else
            echo "No .kube directory found in artifacts"
          fi
          
          scp -v -r artifacts/keys-config/* $EC2_USERNAME@$EC2_HOST:~/deploy_temp/keys/ || echo "No keys directory to copy"

          # Deploy files with structured approach
          ssh $EC2_USERNAME@$EC2_HOST "
            echo 'Checking deploy_temp contents:'
            echo 'API Gateway files:'
            ls -la ~/deploy_temp/api-gateway/
            echo 'Discovery Server files:'
            ls -la ~/deploy_temp/discovery-server/
            echo 'Edge Service files:'
            ls -la ~/deploy_temp/edge-service/
            echo 'Docker Compose file:'
            ls -la ~/deploy_temp/docker-compose.yml
            echo '.kube directory:'
            ls -la ~/deploy_temp/.kube/
            
            echo 'Creating target directories with proper permissions...'
            # Create base directory first
            sudo mkdir -p /var/www/linqra
            sudo chown ubuntu:ubuntu /var/www/linqra
            
            # Create and set permissions for subdirectories
            for dir in api-gateway discovery-server edge-service .kube keys; do
              sudo mkdir -p /var/www/linqra/\$dir
              sudo chown ubuntu:ubuntu /var/www/linqra/\$dir
            done
            
            echo 'Moving files to target directories...'
            # Copy files with proper error handling
            echo 'Copying API Gateway files...'
            cp -rv ~/deploy_temp/api-gateway/* /var/www/linqra/api-gateway/ || echo 'No api-gateway files to copy'
            
            echo 'Copying Discovery Server files...'
            cp -rv ~/deploy_temp/discovery-server/* /var/www/linqra/discovery-server/ || echo 'No discovery-server files to copy'
            
            echo 'Copying Edge Service files...'
            cp -rv ~/deploy_temp/edge-service/* /var/www/linqra/edge-service/ || echo 'No edge-service files to copy'
            
            echo 'Copying Docker Compose file...'
            cp -v ~/deploy_temp/docker-compose.yml /var/www/linqra/ || echo 'No docker-compose.yml to copy'
            
            echo 'Copying .kube files...'
            sudo cp -rv ~/deploy_temp/.kube/. /var/www/linqra/.kube/ || echo 'No .kube files to copy'
            
            echo 'Copying keys files...'
            sudo cp -rv ~/deploy_temp/keys/* /var/www/linqra/keys/ || echo 'No keys files to copy'
            
            echo 'Setting final permissions...'
            sudo chown -R ubuntu:ubuntu /var/www/linqra
            sudo chmod -R 600 /var/www/linqra/keys/* || echo 'No keys to set permissions for'

            echo 'Final directory structure:'
            ls -la /var/www/linqra/
            echo 'Discovery Server contents:'
            ls -la /var/www/linqra/discovery-server/
            echo 'API Gateway contents:'
            ls -la /var/www/linqra/api-gateway/

            rm -rf ~/deploy_temp
            
            echo 'Deployment completed'
          "

  dependency-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high 