name: Linqra CI
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  java-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Upload API Gateway source files
      - name: Upload API Gateway source
        uses: actions/upload-artifact@v4
        with:
          name: api-gateway-source
          path: |
            api-gateway/**
            !api-gateway/target/**
            !api-gateway/target/

      # Upload Discovery Server source files
      - name: Upload Discovery Server source
        uses: actions/upload-artifact@v4
        with:
          name: discovery-server-source
          path: |
            discovery-server/**
            !discovery-server/target/**
            !discovery-server/target/

      # Upload docker-compose.yml
      - name: Upload docker-compose file
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: docker-compose-ec2.yml

      # Upload root pom.xml
      - name: Upload root pom file
        uses: actions/upload-artifact@v4
        with:
          name: root-pom
          path: pom.xml

      # Debug and upload .kube directory with hidden files
      - name: Debug .kube directory
        run: |
          echo "Checking .kube directory contents:"
          ls -la .kube/
          
      - name: Copy .kube to temporary directory
        run: |
          cp -r .kube kube-config
          
      - name: Upload kube directory
        uses: actions/upload-artifact@v4
        with:
          name: kube-config
          path: kube-config/**

      # Add this new step to upload keys directory
      - name: Upload keys directory
        uses: actions/upload-artifact@v4
        with:
          name: keys-config
          path: keys/
          if-no-files-found: error

      # Add this new step to upload scripts directory
      - name: Upload scripts directory
        uses: actions/upload-artifact@v4
        with:
          name: scripts-config
          path: scripts/
          if-no-files-found: error

  # we build react here in the GitHub actions
  react-build:
    needs: java-app
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./edge-service
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file
        run: |
          # Remove existing .env if present
          rm -f .env
          
          # Create new .env file
          cat <<'EOF' > .env
          VITE_MONGODB_URI=${{ secrets.VITE_MONGODB_URI }}
          VITE_MONGODB_DB_NAME=${{ secrets.VITE_MONGODB_DB_NAME }}
          NODE_ENV=production
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          VITE_WS_URL=${{ secrets.VITE_WS_URL }}
          VITE_API_GATEWAY_URL=${{ secrets.VITE_API_GATEWAY_URL }}
          REACT_APP_KEYCLOAK_URL=${{ secrets.REACT_APP_KEYCLOAK_URL }}
          REACT_APP_KEYCLOAK_REALM=${{ secrets.REACT_APP_KEYCLOAK_REALM }}
          REACT_APP_KEYCLOAK_CLIENT_ID=${{ secrets.REACT_APP_KEYCLOAK_CLIENT_ID }}
          VITE_API_KEY=${{ secrets.VITE_API_KEY }}
          VITE_API_KEY_NAME=${{ secrets.VITE_API_KEY_NAME }}
          EOF
          
          # Verify .env was created
          if [ -f .env ]; then
            echo "✅ .env file created successfully"
            echo "File size: $(wc -c < .env) bytes"
          else
            echo "❌ Failed to create .env file"
            exit 1
          fi
        working-directory: ./edge-service

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.5.0'

      - name: Upgrade npm
        run: npm install -g npm@10.8.1

      - name: Remove package-lock.json
        run: rm -f package-lock.json

      - name: Install dependencies
        run: npm install --legacy-peer-deps
        continue-on-error: true

      - name: Build React app
        run: npm run build
        env:
          CI: false

      - name: Run tests
        run: npm test
        env:
          CI: false

      # Upload React build
      - name: Upload React build
        uses: actions/upload-artifact@v4
        with:
          name: react-build
          path: edge-service/dist

  deploy:
    needs: [java-app, react-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY_PROD }}
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.HOST_DNS_PROD }}
          EC2_USERNAME: ${{ secrets.USERNAME_PROD }}
          TARGET_DIR: ${{ secrets.TARGET_DIR_PROD }}
        run: |
          # Disable strict host key checking
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking no" >> ~/.ssh/config

          # Rsync main directories (only changed/new files, with sudo on remote)
          rsync -avz --delete --rsync-path="sudo rsync" artifacts/api-gateway-source/ $EC2_USERNAME@$EC2_HOST:/var/www/linqra/api-gateway/
          rsync -avz --delete --rsync-path="sudo rsync" artifacts/discovery-server-source/ $EC2_USERNAME@$EC2_HOST:/var/www/linqra/discovery-server/
          rsync -avz --delete --rsync-path="sudo rsync" artifacts/react-build/ $EC2_USERNAME@$EC2_HOST:/var/www/linqra/edge-service/

          # Use scp for sensitive or always-fresh files
          scp -v artifacts/docker-compose/docker-compose-ec2.yml $EC2_USERNAME@$EC2_HOST:/var/www/linqra/docker-compose.yml
          scp -v artifacts/root-pom/pom.xml $EC2_USERNAME@$EC2_HOST:/var/www/linqra/pom.xml

          # .kube, keys, and scripts (if needed, use scp or rsync as appropriate)
          # CRITICAL: Protect all data directories from deletion during rsync
          if [ -d "artifacts/kube-config" ]; then
            rsync -avz --delete \
              --filter='protect mongodb/data1/***' \
              --filter='protect mongodb/data2/***' \
              --filter='protect mongodb/data3/***' \
              --filter='protect postgres/data/***' \
              --filter='protect pgadmin/data/***' \
              --filter='protect keycloak/data/***' \
              --filter='protect chroma/data/***' \
              --filter='protect milvus/data/***' \
              --filter='protect etcd/data/***' \
              --filter='protect minio/data/***' \
              --exclude 'mongodb/data1/' \
              --exclude 'mongodb/data2/' \
              --exclude 'mongodb/data3/' \
              --exclude 'postgres/data/' \
              --exclude 'pgadmin/data/' \
              --exclude 'keycloak/data/' \
              --exclude 'chroma/data/' \
              --exclude 'milvus/data/' \
              --exclude 'etcd/data/' \
              --exclude 'minio/data/' \
              --rsync-path="sudo rsync" artifacts/kube-config/ $EC2_USERNAME@$EC2_HOST:/var/www/linqra/.kube/
          fi
          if [ -d "artifacts/keys-config" ]; then
            rsync -avz --delete --rsync-path="sudo rsync" artifacts/keys-config/ $EC2_USERNAME@$EC2_HOST:/var/www/linqra/keys/
          fi
          if [ -d "artifacts/scripts-config" ]; then
            rsync -avz --delete --rsync-path="sudo rsync" artifacts/scripts-config/ $EC2_USERNAME@$EC2_HOST:/var/www/linqra/scripts/
          fi

          echo "About to run SSH block"
          ssh $EC2_USERNAME@$EC2_HOST "
            # Set basic permissions
            sudo chown -R ubuntu:ubuntu /var/www/linqra
            sudo chmod -R 600 /var/www/linqra/keys/* || echo 'No keys to set permissions for'
            sudo find /var/www/linqra/keys -type d -exec chmod 755 {} \;
            sudo find /var/www/linqra/keys -type f ! -name 'mongo-keyfile' -exec chmod 600 {} \;

            # Create edge-service .env on EC2 (not stored in repo)
            if [ ! -d /var/www/linqra/edge-service ]; then echo 'edge-service directory not found at /var/www/linqra/edge-service'; exit 1; fi
            sudo bash -lc 'printf "%s\\n" \
              "VITE_MONGODB_URI=${{ secrets.VITE_MONGODB_URI }}" \
              "VITE_MONGODB_DB_NAME=${{ secrets.VITE_MONGODB_DB_NAME }}" \
              "NODE_ENV=production" \
              "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
              "VITE_WS_URL=${{ secrets.VITE_WS_URL }}" \
              "VITE_API_GATEWAY_URL=${{ secrets.VITE_API_GATEWAY_URL }}" \
              "REACT_APP_KEYCLOAK_URL=${{ secrets.REACT_APP_KEYCLOAK_URL }}" \
              "REACT_APP_KEYCLOAK_REALM=${{ secrets.REACT_APP_KEYCLOAK_REALM }}" \
              "REACT_APP_KEYCLOAK_CLIENT_ID=${{ secrets.REACT_APP_KEYCLOAK_CLIENT_ID }}" \
              "VITE_API_KEY=${{ secrets.VITE_API_KEY }}" \
              "VITE_API_KEY_NAME=${{ secrets.VITE_API_KEY_NAME }}" \
              > /var/www/linqra/edge-service/.env'
            sudo chmod 600 /var/www/linqra/edge-service/.env

            # ========================================
            # CRITICAL: Protect data directories FIRST before any other operations
            # ========================================
            
            # Ensure Postgres data directory exists with correct permissions
            echo 'Setting up Postgres data directory'
            if [ ! -d /var/www/linqra/.kube/postgres/data ] || [ -z \"\$(ls -A /var/www/linqra/.kube/postgres/data)\" ]; then
              echo 'Creating new Postgres data directory'
              sudo mkdir -p /var/www/linqra/.kube/postgres/data
              sudo chown -R 999:999 /var/www/linqra/.kube/postgres/data
              sudo chmod 700 /var/www/linqra/.kube/postgres/data
            else
              echo 'Postgres data directory exists, fixing permissions only'
              sudo chown -R 999:999 /var/www/linqra/.kube/postgres/data
              sudo chmod 700 /var/www/linqra/.kube/postgres/data
            fi

            # Set correct permissions for MongoDB data directories
            for d in data1 data2 data3; do
              if [ -d /var/www/linqra/.kube/mongodb/\$d ]; then
                sudo chown -R 999:999 /var/www/linqra/.kube/mongodb/\$d
              fi
            done
            
            # Set correct permissions for mongo-keyfile
            if [ -f /var/www/linqra/.kube/mongodb/mongo-keyfile ]; then
              sudo chown 999:999 /var/www/linqra/.kube/mongodb/mongo-keyfile
              sudo chmod 400 /var/www/linqra/.kube/mongodb/mongo-keyfile
            fi

            # Ensure PgAdmin directories exist with correct permissions
            sudo mkdir -p /var/www/linqra/.kube/pgadmin/data
            sudo chown -R 5050:5050 /var/www/linqra/.kube/pgadmin
            sudo chmod -R 755 /var/www/linqra/.kube/pgadmin

            # Ensure the sessions directory exists and is owned by pgadmin
            sudo mkdir -p /var/www/linqra/.kube/pgadmin/data/sessions
            sudo chown 5050:5050 /var/www/linqra/.kube/pgadmin/data/sessions
            sudo chmod 700 /var/www/linqra/.kube/pgadmin/data/sessions

            # Ensure scripts are executable
            sudo chmod +x /var/www/linqra/scripts/*.sh

            # Generate certificates for services
            # TODO: Make the new services dynamically without hardcoding, for now this is fine
            echo 'Generating certificates for services'
            cd /var/www/linqra/scripts
            sudo ./generate-service-certs.sh inventory-service
            sudo ./generate-service-certs.sh product-service
            sudo ./generate-service-certs.sh quotes-service
            # Add new services here

            # Generate HAProxy certificates
            echo 'Generating HAProxy certificates'
            sudo ./generate-haproxy-certs.sh

            # Verify SSL configuration
            echo 'Verifying SSL configuration'
            sudo ./verify-ssl-config.sh inventory-service
            sudo ./verify-ssl-config.sh product-service
            # Add new services here

            # Ensure HAProxy cert file is readable
            if [ -f /var/www/linqra/keys/haproxy/gateway-combined-container.pem ]; then
              sudo chmod 644 /var/www/linqra/keys/haproxy/gateway-combined-container.pem
            fi

            # Move to the deployment directory
            cd /var/www/linqra

            # Stop running containers
            echo 'Stopping running containers'
            sudo docker compose stop

            # Prune unused images and containers (but preserve volumes and networks)
            echo 'Pruning unused images and containers'
            sudo docker image prune -a -f
            sudo docker container prune -f

            # Check disk usage
            echo 'Checking disk usage'
            df -hT

            # Ensure the Docker network exists
            echo 'Ensuring the Docker network exists'
            sudo docker network ls | grep -q linqra-network || sudo docker network create linqra-network

            # Build and start containers
            echo 'Building and starting containers'
            sudo docker compose -f docker-compose.yml -p linqra up -d --build

            # Check if containers are running
            echo 'Checking if containers are running'
            docker ps
          "

      - name: Post Install SSH Key
        if: always()
        run: |
          if [ -n "${SSH_AUTH_SOCK:-}" ]; then
            eval "$(ssh-agent -k)" || true
          fi

  dependency-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high 